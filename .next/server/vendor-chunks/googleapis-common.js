"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/googleapis-common";
exports.ids = ["vendor-chunks/googleapis-common"];
exports.modules = {

/***/ "(rsc)/./node_modules/googleapis-common/build/src/apiIndex.js":
/*!**************************************************************!*\
  !*** ./node_modules/googleapis-common/build/src/apiIndex.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getAPI = getAPI;\nfunction getAPI(api, options, // eslint-disable-next-line @typescript-eslint/no-explicit-any\nversions, context) {\n    let version;\n    if (typeof options === \"string\") {\n        version = options;\n        options = {};\n    } else if (typeof options === \"object\") {\n        version = options.version;\n        delete options.version;\n    } else {\n        throw new Error(\"Argument error: Accepts only string or object\");\n    }\n    try {\n        const ctr = versions[version];\n        const ep = new ctr(options, context);\n        return Object.freeze(ep);\n    } catch (e) {\n        throw new Error(`Unable to load endpoint ${api}(\"${version}\"): ${e.message}`);\n    }\n} //# sourceMappingURL=apiIndex.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlYXBpcy1jb21tb24vYnVpbGQvc3JjL2FwaUluZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsNEJBQTRCO0FBQzVCLGtFQUFrRTtBQUNsRSxtRUFBbUU7QUFDbkUsMENBQTBDO0FBQzFDLEVBQUU7QUFDRixnREFBZ0Q7QUFDaEQsRUFBRTtBQUNGLHNFQUFzRTtBQUN0RSxvRUFBb0U7QUFDcEUsMkVBQTJFO0FBQzNFLHNFQUFzRTtBQUN0RSxpQ0FBaUM7QUFDakNBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxjQUFjLEdBQUdFO0FBQ2pCLFNBQVNBLE9BQU9DLEdBQUcsRUFBRUMsT0FBTyxFQUM1Qiw4REFBOEQ7QUFDOURDLFFBQVEsRUFBRUMsT0FBTztJQUNiLElBQUlDO0lBQ0osSUFBSSxPQUFPSCxZQUFZLFVBQVU7UUFDN0JHLFVBQVVIO1FBQ1ZBLFVBQVUsQ0FBQztJQUNmLE9BQ0ssSUFBSSxPQUFPQSxZQUFZLFVBQVU7UUFDbENHLFVBQVVILFFBQVFHLE9BQU87UUFDekIsT0FBT0gsUUFBUUcsT0FBTztJQUMxQixPQUNLO1FBQ0QsTUFBTSxJQUFJQyxNQUFNO0lBQ3BCO0lBQ0EsSUFBSTtRQUNBLE1BQU1DLE1BQU1KLFFBQVEsQ0FBQ0UsUUFBUTtRQUM3QixNQUFNRyxLQUFLLElBQUlELElBQUlMLFNBQVNFO1FBQzVCLE9BQU9SLE9BQU9hLE1BQU0sQ0FBQ0Q7SUFDekIsRUFDQSxPQUFPRSxHQUFHO1FBQ04sTUFBTSxJQUFJSixNQUFNLENBQUMsd0JBQXdCLEVBQUVMLElBQUksRUFBRSxFQUFFSSxRQUFRLElBQUksRUFBRUssRUFBRUMsT0FBTyxDQUFDLENBQUM7SUFDaEY7QUFDSixFQUNBLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL21hcmtldGNhcC1kaXJlY3RvcnkvLi9ub2RlX21vZHVsZXMvZ29vZ2xlYXBpcy1jb21tb24vYnVpbGQvc3JjL2FwaUluZGV4LmpzPzYzNmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0QVBJID0gZ2V0QVBJO1xuZnVuY3Rpb24gZ2V0QVBJKGFwaSwgb3B0aW9ucywgXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxudmVyc2lvbnMsIGNvbnRleHQpIHtcbiAgICBsZXQgdmVyc2lvbjtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZlcnNpb24gPSBvcHRpb25zO1xuICAgICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnb2JqZWN0Jykge1xuICAgICAgICB2ZXJzaW9uID0gb3B0aW9ucy52ZXJzaW9uO1xuICAgICAgICBkZWxldGUgb3B0aW9ucy52ZXJzaW9uO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBcmd1bWVudCBlcnJvcjogQWNjZXB0cyBvbmx5IHN0cmluZyBvciBvYmplY3QnKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY3RyID0gdmVyc2lvbnNbdmVyc2lvbl07XG4gICAgICAgIGNvbnN0IGVwID0gbmV3IGN0cihvcHRpb25zLCBjb250ZXh0KTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5mcmVlemUoZXApO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBsb2FkIGVuZHBvaW50ICR7YXBpfShcIiR7dmVyc2lvbn1cIik6ICR7ZS5tZXNzYWdlfWApO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwaUluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldEFQSSIsImFwaSIsIm9wdGlvbnMiLCJ2ZXJzaW9ucyIsImNvbnRleHQiLCJ2ZXJzaW9uIiwiRXJyb3IiLCJjdHIiLCJlcCIsImZyZWV6ZSIsImUiLCJtZXNzYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/googleapis-common/build/src/apiIndex.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/googleapis-common/build/src/apirequest.js":
/*!****************************************************************!*\
  !*** ./node_modules/googleapis-common/build/src/apirequest.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.createAPIRequest = createAPIRequest;\nconst gaxios_1 = __webpack_require__(/*! gaxios */ \"(rsc)/./node_modules/gaxios/build/cjs/src/index.js\");\nconst qs = __webpack_require__(/*! qs */ \"(rsc)/./node_modules/qs/lib/index.js\");\nconst stream = __webpack_require__(/*! stream */ \"stream\");\nconst urlTemplate = __webpack_require__(/*! url-template */ \"(rsc)/./node_modules/url-template/lib/url-template.js\");\nconst extend = __webpack_require__(/*! extend */ \"(rsc)/./node_modules/extend/index.js\");\nconst isbrowser_1 = __webpack_require__(/*! ./isbrowser */ \"(rsc)/./node_modules/googleapis-common/build/src/isbrowser.js\");\nconst h2 = __webpack_require__(/*! ./http2 */ \"(rsc)/./node_modules/googleapis-common/build/src/http2.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/googleapis-common/build/src/util.js\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst pkg = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/googleapis-common/package.json\");\nconst randomUUID = ()=>globalThis.crypto?.randomUUID() || (__webpack_require__(/*! crypto */ \"crypto\").randomUUID)();\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction isReadableStream(obj) {\n    return obj !== null && typeof obj === \"object\" && typeof obj.pipe === \"function\" && obj.readable !== false && typeof obj._read === \"function\" && typeof obj._readableState === \"object\";\n}\nfunction getMissingParams(params, required) {\n    const missing = new Array();\n    required.forEach((param)=>{\n        // Is the required param in the params object?\n        if (params[param] === undefined) {\n            missing.push(param);\n        }\n    });\n    // If there are any required params missing, return their names in array,\n    // otherwise return null\n    return missing.length > 0 ? missing : null;\n}\nfunction createAPIRequest(parameters, callback) {\n    if (callback) {\n        createAPIRequestAsync(parameters).then((r)=>callback(null, r), callback);\n    } else {\n        return createAPIRequestAsync(parameters);\n    }\n}\nasync function createAPIRequestAsync(parameters) {\n    // Combine the GaxiosOptions options passed with this specific\n    // API call with the global options configured at the API Context\n    // level, or at the global level.\n    const options = extend(true, {}, parameters.context.google?._options || {}, parameters.context._options || {}, parameters.options);\n    const params = extend(true, {}, options.params, parameters.params);\n    options.userAgentDirectives = options.userAgentDirectives || [];\n    const media = params.media || {};\n    /**\n     * In a previous version of this API, the request body was stuffed in a field\n     * named `resource`.  This caused lots of problems, because it's not uncommon\n     * to have an actual named parameter required which is also named `resource`.\n     * This meant that users would have to use `resource_` in those cases, which\n     * pretty much nobody figures out on their own. The request body is now\n     * documented as being in the `requestBody` property, but we also need to keep\n     * using `resource` for reasons of back-compat. Cases that need to be covered\n     * here:\n     * - user provides just a `resource` with a request body\n     * - user provides both a `resource` and a `resource_`\n     * - user provides just a `requestBody`\n     * - user provides both a `requestBody` and a `resource`\n     */ let resource = params.requestBody;\n    if (!params.requestBody && params.resource && (!parameters.requiredParams.includes(\"resource\") || typeof params.resource !== \"string\")) {\n        resource = params.resource;\n        delete params.resource;\n    }\n    delete params.requestBody;\n    let authClient = params.auth || options.auth;\n    const defaultMime = typeof media.body === \"string\" ? \"text/plain\" : \"application/octet-stream\";\n    delete params.media;\n    delete params.auth;\n    // Grab headers from user provided options\n    const headers = (0, util_1.headersToClassicHeaders)(params.headers || {});\n    populateAPIHeader(headers, options.apiVersion);\n    delete params.headers;\n    // Un-alias parameters that were modified due to conflicts with reserved names\n    Object.keys(params).forEach((key)=>{\n        if (key.slice(-1) === \"_\") {\n            const newKey = key.slice(0, -1);\n            params[newKey] = params[key];\n            delete params[key];\n        }\n    });\n    // Check for missing required parameters in the API request\n    const missingParams = getMissingParams(params, parameters.requiredParams);\n    if (missingParams) {\n        // Some params are missing - stop further operations and inform the\n        // developer which required params are not included in the request\n        throw new Error(\"Missing required parameters: \" + missingParams.join(\", \"));\n    }\n    // Parse urls\n    if (options.url) {\n        let url = options.url;\n        if (typeof url === \"object\") {\n            url = url.toString();\n        }\n        options.url = urlTemplate.parse(url).expand(params);\n    }\n    if (parameters.mediaUrl) {\n        parameters.mediaUrl = urlTemplate.parse(parameters.mediaUrl).expand(params);\n    }\n    // Rewrite url if rootUrl is globally set\n    if (parameters.context._options.rootUrl !== undefined && options.url !== undefined) {\n        const originalUrl = new URL(options.url);\n        const path = originalUrl.href.substr(originalUrl.origin.length);\n        options.url = new URL(path, parameters.context._options.rootUrl).href;\n    }\n    // When forming the querystring, override the serializer so that array\n    // values are serialized like this:\n    // myParams: ['one', 'two'] ---> 'myParams=one&myParams=two'\n    // This serializer also encodes spaces in the querystring as `%20`,\n    // whereas the default serializer in gaxios encodes to a `+`.\n    options.paramsSerializer = (params)=>{\n        return qs.stringify(params, {\n            arrayFormat: \"repeat\"\n        });\n    };\n    // delete path params from the params object so they do not end up in query\n    parameters.pathParams.forEach((param)=>delete params[param]);\n    // if authClient is actually a string, use it as an API KEY\n    if (typeof authClient === \"string\") {\n        params.key = params.key || authClient;\n        authClient = undefined;\n    }\n    function multipartUpload(multipart) {\n        const boundary = randomUUID();\n        const finale = `--${boundary}--`;\n        const rStream = new stream.PassThrough({\n            flush (callback) {\n                this.push(\"\\r\\n\");\n                this.push(finale);\n                callback();\n            }\n        });\n        const pStream = new ProgressStream();\n        const isStream = isReadableStream(multipart[1].body);\n        headers[\"content-type\"] = `multipart/related; boundary=${boundary}`;\n        for (const part of multipart){\n            const preamble = `--${boundary}\\r\\ncontent-type: ${part[\"content-type\"]}\\r\\n\\r\\n`;\n            rStream.push(preamble);\n            if (typeof part.body === \"string\") {\n                rStream.push(part.body);\n                rStream.push(\"\\r\\n\");\n            } else {\n                // Gaxios does not natively support onUploadProgress in node.js.\n                // Pipe through the pStream first to read the number of bytes read\n                // for the purpose of tracking progress.\n                pStream.on(\"progress\", (bytesRead)=>{\n                    if (options.onUploadProgress) {\n                        options.onUploadProgress({\n                            bytesRead\n                        });\n                    }\n                });\n                part.body.pipe(pStream).pipe(rStream);\n            }\n        }\n        if (!isStream) {\n            rStream.push(finale);\n            rStream.push(null);\n        }\n        options.data = rStream;\n    }\n    function browserMultipartUpload(multipart) {\n        const boundary = randomUUID();\n        const finale = `--${boundary}--`;\n        headers[\"content-type\"] = `multipart/related; boundary=${boundary}`;\n        let content = \"\";\n        for (const part of multipart){\n            const preamble = `--${boundary}\\r\\ncontent-type: ${part[\"content-type\"]}\\r\\n\\r\\n`;\n            content += preamble;\n            if (typeof part.body === \"string\") {\n                content += part.body;\n                content += \"\\r\\n\";\n            }\n        }\n        content += finale;\n        options.data = content;\n    }\n    if (parameters.mediaUrl && media.body) {\n        options.url = parameters.mediaUrl;\n        if (resource) {\n            params.uploadType = \"multipart\";\n            const multipart = [\n                {\n                    \"content-type\": \"application/json\",\n                    body: JSON.stringify(resource)\n                },\n                {\n                    \"content-type\": media.mimeType || resource && resource.mimeType || defaultMime,\n                    body: media.body\n                }\n            ];\n            if (!(0, isbrowser_1.isBrowser)()) {\n                // gaxios doesn't support multipart/related uploads, so it has to\n                // be implemented here.\n                multipartUpload(multipart);\n            } else {\n                browserMultipartUpload(multipart);\n            }\n        } else {\n            params.uploadType = \"media\";\n            Object.assign(headers, {\n                \"content-type\": media.mimeType || defaultMime\n            });\n            options.data = media.body;\n        }\n    } else {\n        options.data = resource || undefined;\n    }\n    options.headers = gaxios_1.Gaxios.mergeHeaders(options.headers || {}, headers);\n    options.params = params;\n    if (!(0, isbrowser_1.isBrowser)()) {\n        options.headers.set(\"Accept-Encoding\", \"gzip\");\n        options.userAgentDirectives.push({\n            product: \"google-api-nodejs-client\",\n            version: pkg.version,\n            comment: \"gzip\"\n        });\n        const userAgent = options.userAgentDirectives.map((d)=>{\n            let line = `${d.product}/${d.version}`;\n            if (d.comment) {\n                line += ` (${d.comment})`;\n            }\n            return line;\n        }).join(\" \");\n        options.headers.set(\"User-Agent\", userAgent);\n    }\n    // By default gaxios treats any 2xx as valid, and all non 2xx status\n    // codes as errors.  This is a problem for HTTP 304s when used along\n    // with an eTag.\n    if (!options.validateStatus) {\n        options.validateStatus = (status)=>{\n            return status >= 200 && status < 300 || status === 304;\n        };\n    }\n    // Retry by default\n    options.retry = options.retry === undefined ? true : options.retry;\n    delete options.auth; // is overridden by our auth code\n    // Determine TPC universe\n    if (options.universeDomain && options.universe_domain && options.universeDomain !== options.universe_domain) {\n        throw new Error(\"Please set either universe_domain or universeDomain, but not both.\");\n    }\n    const universeDomainEnvVar = typeof process === \"object\" && typeof process.env === \"object\" ? process.env[\"GOOGLE_CLOUD_UNIVERSE_DOMAIN\"] : undefined;\n    const universeDomain = options.universeDomain ?? options.universe_domain ?? universeDomainEnvVar ?? \"googleapis.com\";\n    // Update URL to point to the given TPC universe\n    if (universeDomain !== \"googleapis.com\" && options.url) {\n        const url = new URL(options.url);\n        if (url.hostname.endsWith(\".googleapis.com\")) {\n            url.hostname = url.hostname.replace(/googleapis\\.com$/, universeDomain);\n            options.url = url.toString();\n        }\n    }\n    // An empty params would add a querystring on a spec-compliant serializer\n    if (!Object.keys(options.params).length) {\n        delete options.params;\n        delete options.paramsSerializer;\n    }\n    // Perform the HTTP request.  NOTE: this function used to return a\n    // mikeal/request object. Since the transition to Axios, the method is\n    // now void.  This may be a source of confusion for users upgrading from\n    // version 24.0 -> 25.0 or up.\n    if (authClient && typeof authClient === \"object\") {\n        // Validate TPC universe\n        const universeFromAuth = typeof authClient.getUniverseDomain === \"function\" ? await authClient.getUniverseDomain() : undefined;\n        if (universeFromAuth && universeDomain !== universeFromAuth) {\n            throw new Error(`The configured universe domain (${universeDomain}) does not match the universe domain found in the credentials (${universeFromAuth}). ` + \"If you haven't configured the universe domain explicitly, googleapis.com is the default.\");\n        }\n        if (options.http2) {\n            const authHeaders = await authClient.getRequestHeaders(options.url);\n            const mooOpts = Object.assign({}, options);\n            mooOpts.headers = gaxios_1.Gaxios.mergeHeaders(mooOpts.headers, authHeaders);\n            return h2.request(mooOpts);\n        } else {\n            const res = await authClient.request(options);\n            return (0, util_1.marshallGaxiosResponse)(res);\n        }\n    } else {\n        return new gaxios_1.Gaxios().request(options).then((res)=>(0, util_1.marshallGaxiosResponse)(res));\n    }\n}\n/**\n * Basic Passthrough Stream that records the number of bytes read\n * every time the cursor is moved.\n */ class ProgressStream extends stream.Transform {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _transform(chunk, encoding, callback) {\n        this.bytesRead += chunk.length;\n        this.emit(\"progress\", this.bytesRead);\n        this.push(chunk);\n        callback();\n    }\n    constructor(...args){\n        super(...args);\n        this.bytesRead = 0;\n    }\n}\nfunction populateAPIHeader(headers, apiVersion) {\n    // TODO: we should eventually think about adding browser support for this\n    // populating the gl-web header (web support should also be added to\n    // google-auth-library-nodejs).\n    if (!(0, isbrowser_1.isBrowser)()) {\n        headers[\"x-goog-api-client\"] = `gdcl/${pkg.version} gl-node/${process.versions.node}`;\n    }\n    if (apiVersion) {\n        headers[\"x-goog-api-version\"] = apiVersion;\n    }\n} //# sourceMappingURL=apirequest.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/googleapis-common/build/src/apirequest.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/googleapis-common/build/src/authplus.js":
/*!**************************************************************!*\
  !*** ./node_modules/googleapis-common/build/src/authplus.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AuthPlus = void 0;\nconst google_auth_library_1 = __webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/google-auth-library/build/src/index.js\");\nclass AuthPlus extends google_auth_library_1.GoogleAuth {\n    /**\n     * Override getClient(), memoizing an instance of auth for\n     * subsequent calls to getProjectId().\n     */ async getClient(options) {\n        this._cachedAuth = new google_auth_library_1.GoogleAuth(options);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return this._cachedAuth.getClient();\n    }\n    getProjectId(callback) {\n        if (callback) {\n            return this._cachedAuth ? this._cachedAuth.getProjectId(callback) : super.getProjectId(callback);\n        } else {\n            return this._cachedAuth ? this._cachedAuth.getProjectId() : super.getProjectId();\n        }\n    }\n    constructor(...args){\n        super(...args);\n        this.JWT = google_auth_library_1.JWT;\n        this.Compute = google_auth_library_1.Compute;\n        this.OAuth2 = google_auth_library_1.OAuth2Client;\n        this.GoogleAuth = google_auth_library_1.GoogleAuth;\n        this.AwsClient = google_auth_library_1.AwsClient;\n        this.IdentityPoolClient = google_auth_library_1.IdentityPoolClient;\n        this.ExternalAccountClient = google_auth_library_1.ExternalAccountClient;\n    }\n}\nexports.AuthPlus = AuthPlus; //# sourceMappingURL=authplus.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlYXBpcy1jb21tb24vYnVpbGQvc3JjL2F1dGhwbHVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsNEJBQTRCO0FBQzVCLGtFQUFrRTtBQUNsRSxtRUFBbUU7QUFDbkUsMENBQTBDO0FBQzFDLEVBQUU7QUFDRixnREFBZ0Q7QUFDaEQsRUFBRTtBQUNGLHNFQUFzRTtBQUN0RSxvRUFBb0U7QUFDcEUsMkVBQTJFO0FBQzNFLHNFQUFzRTtBQUN0RSxpQ0FBaUM7QUFDakNBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxnQkFBZ0IsR0FBRyxLQUFLO0FBQ3hCLE1BQU1HLHdCQUF3QkMsbUJBQU9BLENBQUMsd0ZBQXFCO0FBQzNELE1BQU1GLGlCQUFpQkMsc0JBQXNCRSxVQUFVO0lBU25EOzs7S0FHQyxHQUNELE1BQU1DLFVBQVVDLE9BQU8sRUFBRTtRQUNyQixJQUFJLENBQUNDLFdBQVcsR0FBRyxJQUFJTCxzQkFBc0JFLFVBQVUsQ0FBQ0U7UUFDeEQsOERBQThEO1FBQzlELE9BQU8sSUFBSSxDQUFDQyxXQUFXLENBQUNGLFNBQVM7SUFDckM7SUFDQUcsYUFBYUMsUUFBUSxFQUFFO1FBQ25CLElBQUlBLFVBQVU7WUFDVixPQUFPLElBQUksQ0FBQ0YsV0FBVyxHQUNqQixJQUFJLENBQUNBLFdBQVcsQ0FBQ0MsWUFBWSxDQUFDQyxZQUM5QixLQUFLLENBQUNELGFBQWFDO1FBQzdCLE9BQ0s7WUFDRCxPQUFPLElBQUksQ0FBQ0YsV0FBVyxHQUNqQixJQUFJLENBQUNBLFdBQVcsQ0FBQ0MsWUFBWSxLQUM3QixLQUFLLENBQUNBO1FBQ2hCO0lBQ0o7OzthQTVCQUUsTUFBTVIsc0JBQXNCUSxHQUFHO2FBQy9CQyxVQUFVVCxzQkFBc0JTLE9BQU87YUFDdkNDLFNBQVNWLHNCQUFzQlcsWUFBWTthQUMzQ1QsYUFBYUYsc0JBQXNCRSxVQUFVO2FBQzdDVSxZQUFZWixzQkFBc0JZLFNBQVM7YUFDM0NDLHFCQUFxQmIsc0JBQXNCYSxrQkFBa0I7YUFDN0RDLHdCQUF3QmQsc0JBQXNCYyxxQkFBcUI7O0FBdUJ2RTtBQUNBakIsZ0JBQWdCLEdBQUdFLFVBQ25CLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL21hcmtldGNhcC1kaXJlY3RvcnkvLi9ub2RlX21vZHVsZXMvZ29vZ2xlYXBpcy1jb21tb24vYnVpbGQvc3JjL2F1dGhwbHVzLmpzP2E2N2MiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXV0aFBsdXMgPSB2b2lkIDA7XG5jb25zdCBnb29nbGVfYXV0aF9saWJyYXJ5XzEgPSByZXF1aXJlKFwiZ29vZ2xlLWF1dGgtbGlicmFyeVwiKTtcbmNsYXNzIEF1dGhQbHVzIGV4dGVuZHMgZ29vZ2xlX2F1dGhfbGlicmFyeV8xLkdvb2dsZUF1dGgge1xuICAgIEpXVCA9IGdvb2dsZV9hdXRoX2xpYnJhcnlfMS5KV1Q7XG4gICAgQ29tcHV0ZSA9IGdvb2dsZV9hdXRoX2xpYnJhcnlfMS5Db21wdXRlO1xuICAgIE9BdXRoMiA9IGdvb2dsZV9hdXRoX2xpYnJhcnlfMS5PQXV0aDJDbGllbnQ7XG4gICAgR29vZ2xlQXV0aCA9IGdvb2dsZV9hdXRoX2xpYnJhcnlfMS5Hb29nbGVBdXRoO1xuICAgIEF3c0NsaWVudCA9IGdvb2dsZV9hdXRoX2xpYnJhcnlfMS5Bd3NDbGllbnQ7XG4gICAgSWRlbnRpdHlQb29sQ2xpZW50ID0gZ29vZ2xlX2F1dGhfbGlicmFyeV8xLklkZW50aXR5UG9vbENsaWVudDtcbiAgICBFeHRlcm5hbEFjY291bnRDbGllbnQgPSBnb29nbGVfYXV0aF9saWJyYXJ5XzEuRXh0ZXJuYWxBY2NvdW50Q2xpZW50O1xuICAgIF9jYWNoZWRBdXRoO1xuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlIGdldENsaWVudCgpLCBtZW1vaXppbmcgYW4gaW5zdGFuY2Ugb2YgYXV0aCBmb3JcbiAgICAgKiBzdWJzZXF1ZW50IGNhbGxzIHRvIGdldFByb2plY3RJZCgpLlxuICAgICAqL1xuICAgIGFzeW5jIGdldENsaWVudChvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuX2NhY2hlZEF1dGggPSBuZXcgZ29vZ2xlX2F1dGhfbGlicmFyeV8xLkdvb2dsZUF1dGgob3B0aW9ucyk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIHJldHVybiB0aGlzLl9jYWNoZWRBdXRoLmdldENsaWVudCgpO1xuICAgIH1cbiAgICBnZXRQcm9qZWN0SWQoY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGVkQXV0aFxuICAgICAgICAgICAgICAgID8gdGhpcy5fY2FjaGVkQXV0aC5nZXRQcm9qZWN0SWQoY2FsbGJhY2spXG4gICAgICAgICAgICAgICAgOiBzdXBlci5nZXRQcm9qZWN0SWQoY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlZEF1dGhcbiAgICAgICAgICAgICAgICA/IHRoaXMuX2NhY2hlZEF1dGguZ2V0UHJvamVjdElkKClcbiAgICAgICAgICAgICAgICA6IHN1cGVyLmdldFByb2plY3RJZCgpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5BdXRoUGx1cyA9IEF1dGhQbHVzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXV0aHBsdXMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQXV0aFBsdXMiLCJnb29nbGVfYXV0aF9saWJyYXJ5XzEiLCJyZXF1aXJlIiwiR29vZ2xlQXV0aCIsImdldENsaWVudCIsIm9wdGlvbnMiLCJfY2FjaGVkQXV0aCIsImdldFByb2plY3RJZCIsImNhbGxiYWNrIiwiSldUIiwiQ29tcHV0ZSIsIk9BdXRoMiIsIk9BdXRoMkNsaWVudCIsIkF3c0NsaWVudCIsIklkZW50aXR5UG9vbENsaWVudCIsIkV4dGVybmFsQWNjb3VudENsaWVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/googleapis-common/build/src/authplus.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/googleapis-common/build/src/discovery.js":
/*!***************************************************************!*\
  !*** ./node_modules/googleapis-common/build/src/discovery.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Discovery = void 0;\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst gaxios_1 = __webpack_require__(/*! gaxios */ \"(rsc)/./node_modules/gaxios/build/cjs/src/index.js\");\nconst resolve = __webpack_require__(/*! url */ \"url\");\nconst util = __webpack_require__(/*! util */ \"util\");\nconst apirequest_1 = __webpack_require__(/*! ./apirequest */ \"(rsc)/./node_modules/googleapis-common/build/src/apirequest.js\");\nconst endpoint_1 = __webpack_require__(/*! ./endpoint */ \"(rsc)/./node_modules/googleapis-common/build/src/endpoint.js\");\nconst readFile = util.promisify(fs.readFile);\nclass Discovery {\n    /**\n     * Discovery for discovering API endpoints\n     *\n     * @param options Options for discovery\n     */ constructor(options){\n        this.transporter = new gaxios_1.Gaxios();\n        this.options = options || {};\n    }\n    /**\n     * Generate and Endpoint from an endpoint schema object.\n     *\n     * @param schema The schema from which to generate the Endpoint.\n     * @return A function that creates an endpoint.\n     */ makeEndpoint(schema) {\n        return (options)=>{\n            const ep = new endpoint_1.Endpoint(options);\n            ep.applySchema(ep, schema, schema, ep);\n            return ep;\n        };\n    }\n    /**\n     * Log output of generator. Works just like console.log\n     */ log(...args) {\n        if (this.options && this.options.debug) {\n            console.log(...args);\n        }\n    }\n    /**\n     * Generate all APIs and return as in-memory object.\n     * @param discoveryUrl\n     */ async discoverAllAPIs(discoveryUrl) {\n        const headers = new Headers(this.options.includePrivate ? {} : {\n            \"X-User-Ip\": \"0.0.0.0\"\n        });\n        const res = await this.transporter.request({\n            url: discoveryUrl,\n            headers\n        });\n        const items = res.data.items;\n        const apis = await Promise.all(items.map(async (api)=>{\n            const endpointCreator = await this.discoverAPI(api.discoveryRestUrl);\n            return {\n                api,\n                endpointCreator\n            };\n        }));\n        const versionIndex = {};\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const apisIndex = {};\n        for (const set of apis){\n            if (!apisIndex[set.api.name]) {\n                versionIndex[set.api.name] = {};\n                apisIndex[set.api.name] = (options)=>{\n                    const type = typeof options;\n                    let version;\n                    if (type === \"string\") {\n                        version = options;\n                        options = {};\n                    } else if (type === \"object\") {\n                        version = options.version;\n                        delete options.version;\n                    } else {\n                        throw new Error(\"Argument error: Accepts only string or object\");\n                    }\n                    try {\n                        const ep = set.endpointCreator(options, this);\n                        return Object.freeze(ep); // create new & freeze\n                    } catch (e) {\n                        throw new Error(util.format('Unable to load endpoint %s(\"%s\"): %s', set.api.name, version, e.message));\n                    }\n                };\n            }\n            versionIndex[set.api.name][set.api.version] = set.endpointCreator;\n        }\n        return apisIndex;\n    }\n    /**\n     * Generate API file given discovery URL\n     *\n     * @param apiDiscoveryUrl URL or filename of discovery doc for API\n     * @returns A promise that resolves with a function that creates the endpoint\n     */ async discoverAPI(apiDiscoveryUrl) {\n        if (typeof apiDiscoveryUrl === \"string\") {\n            const parts = resolve.parse(apiDiscoveryUrl);\n            if (apiDiscoveryUrl && !parts.protocol) {\n                this.log(\"Reading from file \" + apiDiscoveryUrl);\n                const file = await readFile(apiDiscoveryUrl, {\n                    encoding: \"utf8\"\n                });\n                return this.makeEndpoint(JSON.parse(file));\n            } else {\n                this.log(\"Requesting \" + apiDiscoveryUrl);\n                const res = await this.transporter.request({\n                    url: apiDiscoveryUrl\n                });\n                return this.makeEndpoint(res.data);\n            }\n        } else {\n            const options = apiDiscoveryUrl;\n            this.log(\"Requesting \" + options.url);\n            const url = options.url;\n            delete options.url;\n            const parameters = {\n                options: {\n                    url,\n                    method: \"GET\"\n                },\n                requiredParams: [],\n                pathParams: [],\n                params: options,\n                context: {\n                    google: {\n                        _options: {}\n                    },\n                    _options: {}\n                }\n            };\n            const res = await (0, apirequest_1.createAPIRequest)(parameters);\n            return this.makeEndpoint(res.data);\n        }\n    }\n}\nexports.Discovery = Discovery; //# sourceMappingURL=discovery.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/googleapis-common/build/src/discovery.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/googleapis-common/build/src/endpoint.js":
/*!**************************************************************!*\
  !*** ./node_modules/googleapis-common/build/src/endpoint.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Endpoint = void 0;\nconst apirequest_1 = __webpack_require__(/*! ./apirequest */ \"(rsc)/./node_modules/googleapis-common/build/src/apirequest.js\");\nclass Endpoint {\n    constructor(options){\n        this._options = options || {};\n    }\n    /**\n     * Given a schema, add methods and resources to a target.\n     *\n     * @param {object} target The target to which to apply the schema.\n     * @param {object} rootSchema The top-level schema, so we don't lose track of it\n     * during recursion.\n     * @param {object} schema The current schema from which to extract methods and\n     * resources.\n     * @param {object} context The context to add to each method.\n     */ applySchema(target, rootSchema, schema, context) {\n        this.applyMethodsFromSchema(target, rootSchema, schema, context);\n        if (schema.resources) {\n            for(const resourceName in schema.resources){\n                if (Object.prototype.hasOwnProperty.call(schema.resources, resourceName)) {\n                    const resource = schema.resources[resourceName];\n                    if (!target[resourceName]) {\n                        target[resourceName] = {};\n                    }\n                    this.applySchema(target[resourceName], rootSchema, resource, context);\n                }\n            }\n        }\n    }\n    /**\n     * Given a schema, add methods to a target.\n     *\n     * @param {object} target The target to which to apply the methods.\n     * @param {object} rootSchema The top-level schema, so we don't lose track of it\n     * during recursion.\n     * @param {object} schema The current schema from which to extract methods.\n     * @param {object} context The context to add to each method.\n     */ applyMethodsFromSchema(target, rootSchema, schema, context) {\n        if (schema.methods) {\n            for(const name in schema.methods){\n                if (Object.prototype.hasOwnProperty.call(schema.methods, name)) {\n                    const method = schema.methods[name];\n                    target[name] = this.makeMethod(rootSchema, method, context);\n                }\n            }\n        }\n    }\n    /**\n     * Given a method schema, add a method to a target.\n     *\n     * @param target The target to which to add the method.\n     * @param schema The top-level schema that contains the rootUrl, etc.\n     * @param method The method schema from which to generate the method.\n     * @param context The context to add to the method.\n     */ makeMethod(schema, method, context) {\n        return (paramsOrCallback, callback)=>{\n            const params = typeof paramsOrCallback === \"function\" ? {} : paramsOrCallback;\n            callback = typeof paramsOrCallback === \"function\" ? paramsOrCallback : callback;\n            const schemaUrl = buildurl(schema.rootUrl + schema.servicePath + method.path);\n            const parameters = {\n                options: {\n                    url: schemaUrl.substring(1, schemaUrl.length - 1),\n                    method: method.httpMethod,\n                    apiVersion: method.apiVersion\n                },\n                params,\n                requiredParams: method.parameterOrder || [],\n                pathParams: this.getPathParams(method.parameters),\n                context\n            };\n            if (method.mediaUpload && method.mediaUpload.protocols && method.mediaUpload.protocols.simple && method.mediaUpload.protocols.simple.path) {\n                const mediaUrl = buildurl(schema.rootUrl + method.mediaUpload.protocols.simple.path);\n                parameters.mediaUrl = mediaUrl.substring(1, mediaUrl.length - 1);\n            }\n            if (!callback) {\n                return (0, apirequest_1.createAPIRequest)(parameters);\n            }\n            (0, apirequest_1.createAPIRequest)(parameters, callback);\n            return;\n        };\n    }\n    getPathParams(params) {\n        const pathParams = new Array();\n        if (typeof params !== \"object\") {\n            params = {};\n        }\n        Object.keys(params).forEach((key)=>{\n            if (params[key].location === \"path\") {\n                pathParams.push(key);\n            }\n        });\n        return pathParams;\n    }\n}\nexports.Endpoint = Endpoint;\n/**\n * Build a string used to create a URL from the discovery doc provided URL.\n * replace double slashes with single slash (except in https://)\n * @private\n * @param  input URL to build from\n * @return Resulting built URL\n */ function buildurl(input) {\n    return input ? `'${input}'`.replace(/([^:]\\/)\\/+/g, \"$1\") : \"\";\n} //# sourceMappingURL=endpoint.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/googleapis-common/build/src/endpoint.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/googleapis-common/build/src/http2.js":
/*!***********************************************************!*\
  !*** ./node_modules/googleapis-common/build/src/http2.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.sessions = void 0;\nexports.request = request;\nexports.closeSession = closeSession;\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst qs = __webpack_require__(/*! qs */ \"(rsc)/./node_modules/qs/lib/index.js\");\nconst extend = __webpack_require__(/*! extend */ \"(rsc)/./node_modules/extend/index.js\");\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst util = __webpack_require__(/*! util */ \"util\");\nconst process = __webpack_require__(/*! process */ \"process\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/googleapis-common/build/src/util.js\");\nconst { HTTP2_HEADER_CONTENT_ENCODING, HTTP2_HEADER_CONTENT_TYPE, HTTP2_HEADER_METHOD, HTTP2_HEADER_PATH, HTTP2_HEADER_STATUS } = http2.constants;\nconst DEBUG = !!process.env.HTTP2_DEBUG;\n/**\n * List of sessions current in use.\n * @private\n */ exports.sessions = {};\n/**\n * Public method to make an http2 request.\n * @param config - Request options.\n */ async function request(config) {\n    const opts = extend(true, {}, config);\n    opts.validateStatus = opts.validateStatus || validateStatus;\n    opts.responseType = opts.responseType || \"json\";\n    const url = new url_1.URL(opts.url);\n    // Check for an existing session to this host, or go create a new one.\n    const sessionData = _getClient(url.host);\n    // Since we're using this session, clear the timeout handle to ensure\n    // it stays in memory and connected for a while further.\n    if (sessionData.timeoutHandle !== undefined) {\n        clearTimeout(sessionData.timeoutHandle);\n    }\n    // Assemble the querystring based on config.params.  We're using the\n    // `qs` module to make life a little easier.\n    let pathWithQs = url.pathname;\n    if (config.params && Object.keys(config.params).length > 0) {\n        const serializer = config.paramsSerializer || qs.stringify;\n        const q = serializer(opts.params);\n        pathWithQs += `?${q}`;\n    }\n    // Assemble the headers based on basic HTTP2 primitives (path, method) and\n    // custom headers sent from the consumer. Note: the native `Headers` type does\n    // not support HTTP2 header names (e.g. ':status')\n    const headers = (0, util_1.headersToClassicHeaders)(opts.headers);\n    headers[HTTP2_HEADER_PATH] = pathWithQs;\n    headers[HTTP2_HEADER_METHOD] = config.method || \"GET\";\n    opts.headers = headers;\n    // NOTE: This is working around an upstream bug in `apirequest.ts`. The\n    // request path assumes that the `content-type` header is going to be set in\n    // the underlying HTTP Client. This hack provides bug for bug compatability\n    // with this bug in gaxios:\n    // https://github.com/googleapis/gaxios/blob/main/src/gaxios.ts#L202\n    if (!headers[HTTP2_HEADER_CONTENT_TYPE]) {\n        if (opts.responseType !== \"text\") {\n            headers[HTTP2_HEADER_CONTENT_TYPE] = \"application/json\";\n        }\n    }\n    const res = {\n        config,\n        headers: {},\n        status: 0,\n        data: {},\n        statusText: \"\"\n    };\n    const chunks = [];\n    const session = sessionData.session;\n    let req;\n    return new Promise((resolve, reject)=>{\n        try {\n            req = session.request(headers).on(\"response\", (responseHeaders)=>{\n                Object.assign(res, {\n                    headers: responseHeaders,\n                    status: responseHeaders[HTTP2_HEADER_STATUS]\n                });\n                let stream = req;\n                if (responseHeaders[HTTP2_HEADER_CONTENT_ENCODING] === \"gzip\") {\n                    stream = req.pipe(zlib.createGunzip());\n                }\n                if (opts.responseType === \"stream\") {\n                    res.data = stream;\n                    resolve(res);\n                    return;\n                }\n                stream.on(\"data\", (d)=>{\n                    chunks.push(d);\n                }).on(\"error\", (err)=>{\n                    reject(err);\n                    return;\n                }).on(\"end\", ()=>{\n                    const buf = Buffer.concat(chunks);\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    let data = buf;\n                    if (buf) {\n                        if (opts.responseType === \"json\") {\n                            try {\n                                data = JSON.parse(buf.toString(\"utf8\"));\n                            } catch  {\n                                data = buf.toString(\"utf8\");\n                            }\n                        } else if (opts.responseType === \"text\") {\n                            data = buf.toString(\"utf8\");\n                        } else if (opts.responseType === \"arraybuffer\") {\n                            data = buf.buffer;\n                        }\n                        res.data = data;\n                    }\n                    if (!opts.validateStatus(res.status)) {\n                        let message = `Request failed with status code ${res.status}. `;\n                        if (res.data && typeof res.data === \"object\") {\n                            const body = util.inspect(res.data, {\n                                depth: 5\n                            });\n                            message = `${message}\\n'${body}`;\n                        }\n                        reject(new Error(message, {\n                            cause: res\n                        }));\n                    }\n                    resolve(res);\n                    return;\n                });\n            }).on(\"error\", (e)=>{\n                reject(e);\n                return;\n            });\n        } catch (e) {\n            closeSession(url).then(()=>reject(e)).catch(reject);\n            return;\n        }\n        res.request = req;\n        // If data was provided, write it to the request in the form of\n        // a stream, string data, or a basic object.\n        if (config.data) {\n            if (config.data instanceof stream_1.Stream) {\n                config.data.pipe(req);\n            } else if (typeof config.data === \"string\") {\n                const data = Buffer.from(config.data);\n                req.end(data);\n            } else if (typeof config.data === \"object\") {\n                const data = JSON.stringify(config.data);\n                req.end(data);\n            }\n        }\n        // Create a timeout so the Http2Session will be cleaned up after\n        // a period of non-use. 500 milliseconds was chosen because it's\n        // a nice round number, and I don't know what would be a better\n        // choice. Keeping this channel open will hold a file descriptor\n        // which will prevent the process from exiting.\n        sessionData.timeoutHandle = setTimeout(()=>closeSession(url), 500);\n    });\n}\n/**\n * By default, throw for any non-2xx status code\n * @param status - status code from the HTTP response\n */ function validateStatus(status) {\n    return status >= 200 && status < 300;\n}\n/**\n * Obtain an existing h2 session or go create a new one.\n * @param host - The hostname to which the session belongs.\n */ function _getClient(host) {\n    if (!exports.sessions[host]) {\n        if (DEBUG) {\n            console.log(`Creating client for ${host}`);\n        }\n        const session = http2.connect(`https://${host}`);\n        session.on(\"error\", (e)=>{\n            console.error(`*ERROR*: ${e}`);\n            delete exports.sessions[host];\n        }).on(\"goaway\", (errorCode, lastStreamId)=>{\n            console.error(`*GOAWAY*: ${errorCode} : ${lastStreamId}`);\n            delete exports.sessions[host];\n        });\n        exports.sessions[host] = {\n            session\n        };\n    } else {\n        if (DEBUG) {\n            console.log(`Used cached client for ${host}`);\n        }\n    }\n    return exports.sessions[host];\n}\nasync function closeSession(url) {\n    const sessionData = exports.sessions[url.host];\n    if (!sessionData) {\n        return;\n    }\n    const { session } = sessionData;\n    delete exports.sessions[url.host];\n    if (DEBUG) {\n        console.error(`Closing ${url.host}`);\n    }\n    session.close(()=>{\n        if (DEBUG) {\n            console.error(`Closed ${url.host}`);\n        }\n    });\n    setTimeout(()=>{\n        if (session && !session.destroyed) {\n            if (DEBUG) {\n                console.log(`Forcing close ${url.host}`);\n            }\n            if (session) {\n                session.destroy();\n            }\n        }\n    }, 1000);\n} //# sourceMappingURL=http2.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/googleapis-common/build/src/http2.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/googleapis-common/build/src/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/googleapis-common/build/src/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Endpoint = exports.Discovery = exports.AuthPlus = exports.createAPIRequest = exports.getAPI = exports.GaxiosError = exports.Gaxios = exports.AwsClient = exports.IdentityPoolClient = exports.BaseExternalAccountClient = exports.ExternalAccountClient = exports.GoogleAuth = exports.UserRefreshClient = exports.Compute = exports.JWT = exports.OAuth2Client = exports.gaxios = exports.googleAuthLibrary = void 0;\n// re-exporting key dependencies\nexports.googleAuthLibrary = __webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/google-auth-library/build/src/index.js\");\nexports.gaxios = __webpack_require__(/*! gaxios */ \"(rsc)/./node_modules/gaxios/build/cjs/src/index.js\");\nvar google_auth_library_1 = __webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/google-auth-library/build/src/index.js\");\nObject.defineProperty(exports, \"OAuth2Client\", ({\n    enumerable: true,\n    get: function() {\n        return google_auth_library_1.OAuth2Client;\n    }\n}));\nObject.defineProperty(exports, \"JWT\", ({\n    enumerable: true,\n    get: function() {\n        return google_auth_library_1.JWT;\n    }\n}));\nObject.defineProperty(exports, \"Compute\", ({\n    enumerable: true,\n    get: function() {\n        return google_auth_library_1.Compute;\n    }\n}));\nObject.defineProperty(exports, \"UserRefreshClient\", ({\n    enumerable: true,\n    get: function() {\n        return google_auth_library_1.UserRefreshClient;\n    }\n}));\nObject.defineProperty(exports, \"GoogleAuth\", ({\n    enumerable: true,\n    get: function() {\n        return google_auth_library_1.GoogleAuth;\n    }\n}));\nObject.defineProperty(exports, \"ExternalAccountClient\", ({\n    enumerable: true,\n    get: function() {\n        return google_auth_library_1.ExternalAccountClient;\n    }\n}));\nObject.defineProperty(exports, \"BaseExternalAccountClient\", ({\n    enumerable: true,\n    get: function() {\n        return google_auth_library_1.BaseExternalAccountClient;\n    }\n}));\nObject.defineProperty(exports, \"IdentityPoolClient\", ({\n    enumerable: true,\n    get: function() {\n        return google_auth_library_1.IdentityPoolClient;\n    }\n}));\nObject.defineProperty(exports, \"AwsClient\", ({\n    enumerable: true,\n    get: function() {\n        return google_auth_library_1.AwsClient;\n    }\n}));\nvar gaxios_1 = __webpack_require__(/*! gaxios */ \"(rsc)/./node_modules/gaxios/build/cjs/src/index.js\");\nObject.defineProperty(exports, \"Gaxios\", ({\n    enumerable: true,\n    get: function() {\n        return gaxios_1.Gaxios;\n    }\n}));\nObject.defineProperty(exports, \"GaxiosError\", ({\n    enumerable: true,\n    get: function() {\n        return gaxios_1.GaxiosError;\n    }\n}));\nvar apiIndex_1 = __webpack_require__(/*! ./apiIndex */ \"(rsc)/./node_modules/googleapis-common/build/src/apiIndex.js\");\nObject.defineProperty(exports, \"getAPI\", ({\n    enumerable: true,\n    get: function() {\n        return apiIndex_1.getAPI;\n    }\n}));\nvar apirequest_1 = __webpack_require__(/*! ./apirequest */ \"(rsc)/./node_modules/googleapis-common/build/src/apirequest.js\");\nObject.defineProperty(exports, \"createAPIRequest\", ({\n    enumerable: true,\n    get: function() {\n        return apirequest_1.createAPIRequest;\n    }\n}));\nvar authplus_1 = __webpack_require__(/*! ./authplus */ \"(rsc)/./node_modules/googleapis-common/build/src/authplus.js\");\nObject.defineProperty(exports, \"AuthPlus\", ({\n    enumerable: true,\n    get: function() {\n        return authplus_1.AuthPlus;\n    }\n}));\nvar discovery_1 = __webpack_require__(/*! ./discovery */ \"(rsc)/./node_modules/googleapis-common/build/src/discovery.js\");\nObject.defineProperty(exports, \"Discovery\", ({\n    enumerable: true,\n    get: function() {\n        return discovery_1.Discovery;\n    }\n}));\nvar endpoint_1 = __webpack_require__(/*! ./endpoint */ \"(rsc)/./node_modules/googleapis-common/build/src/endpoint.js\");\nObject.defineProperty(exports, \"Endpoint\", ({\n    enumerable: true,\n    get: function() {\n        return endpoint_1.Endpoint;\n    }\n}));\n__exportStar(__webpack_require__(/*! ./util */ \"(rsc)/./node_modules/googleapis-common/build/src/util.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/googleapis-common/build/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/googleapis-common/build/src/isbrowser.js":
/*!***************************************************************!*\
  !*** ./node_modules/googleapis-common/build/src/isbrowser.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isBrowser = isBrowser;\nfunction isBrowser() {\n    return \"undefined\" !== \"undefined\";\n} //# sourceMappingURL=isbrowser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlYXBpcy1jb21tb24vYnVpbGQvc3JjL2lzYnJvd3Nlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDRCQUE0QjtBQUM1QixrRUFBa0U7QUFDbEUsbUVBQW1FO0FBQ25FLDBDQUEwQztBQUMxQyxFQUFFO0FBQ0YsZ0RBQWdEO0FBQ2hELEVBQUU7QUFDRixzRUFBc0U7QUFDdEUsb0VBQW9FO0FBQ3BFLDJFQUEyRTtBQUMzRSxzRUFBc0U7QUFDdEUsaUNBQWlDO0FBQ2pDQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsaUJBQWlCLEdBQUdFO0FBQ3BCLFNBQVNBO0lBQ0wsT0FBTyxnQkFBa0I7QUFDN0IsRUFDQSxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXJrZXRjYXAtZGlyZWN0b3J5Ly4vbm9kZV9tb2R1bGVzL2dvb2dsZWFwaXMtY29tbW9uL2J1aWxkL3NyYy9pc2Jyb3dzZXIuanM/ZmU1MyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc0Jyb3dzZXIgPSBpc0Jyb3dzZXI7XG5mdW5jdGlvbiBpc0Jyb3dzZXIoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNicm93c2VyLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImlzQnJvd3NlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/googleapis-common/build/src/isbrowser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/googleapis-common/build/src/util.js":
/*!**********************************************************!*\
  !*** ./node_modules/googleapis-common/build/src/util.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright 2025 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.headersToClassicHeaders = headersToClassicHeaders;\nexports.marshallGaxiosResponse = marshallGaxiosResponse;\n/**\n * A utility for converting potential {@link Headers `Headers`} objects to plain headers objects.\n *\n * @param headers any compatible `HeadersInit` (`Headers`, (string, string)[], {})\n * @returns the headers in `Record<string, string>` form.\n */ function headersToClassicHeaders(headers) {\n    let classicHeaders = {};\n    if (headers instanceof Headers) {\n        headers.forEach((value, key)=>{\n            classicHeaders[key] = value;\n        });\n    } else if (Array.isArray(headers)) {\n        for (const [key, value] of headers){\n            classicHeaders[key] = value;\n        }\n    } else {\n        classicHeaders = headers || {};\n    }\n    return classicHeaders;\n}\n/**\n * marshall a GaxiosResponse into a library-friendly type.\n *\n * @param res the Gaxios Response\n * @returns the GaxiosResponse with HTTP2-ready/compatible headers\n */ function marshallGaxiosResponse(res) {\n    return Object.defineProperties(res || {}, {\n        headers: {\n            configurable: true,\n            writable: true,\n            enumerable: true,\n            value: headersToClassicHeaders(res?.headers)\n        }\n    });\n} //# sourceMappingURL=util.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlYXBpcy1jb21tb24vYnVpbGQvc3JjL3V0aWwuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw0QkFBNEI7QUFDNUIsa0VBQWtFO0FBQ2xFLG1FQUFtRTtBQUNuRSwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLGdEQUFnRDtBQUNoRCxFQUFFO0FBQ0Ysc0VBQXNFO0FBQ3RFLG9FQUFvRTtBQUNwRSwyRUFBMkU7QUFDM0Usc0VBQXNFO0FBQ3RFLGlDQUFpQztBQUNqQ0EsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELCtCQUErQixHQUFHRTtBQUNsQ0YsOEJBQThCLEdBQUdHO0FBQ2pDOzs7OztDQUtDLEdBQ0QsU0FBU0Qsd0JBQXdCRSxPQUFPO0lBQ3BDLElBQUlDLGlCQUFpQixDQUFDO0lBQ3RCLElBQUlELG1CQUFtQkUsU0FBUztRQUM1QkYsUUFBUUcsT0FBTyxDQUFDLENBQUNOLE9BQU9PO1lBQ3BCSCxjQUFjLENBQUNHLElBQUksR0FBR1A7UUFDMUI7SUFDSixPQUNLLElBQUlRLE1BQU1DLE9BQU8sQ0FBQ04sVUFBVTtRQUM3QixLQUFLLE1BQU0sQ0FBQ0ksS0FBS1AsTUFBTSxJQUFJRyxRQUFTO1lBQ2hDQyxjQUFjLENBQUNHLElBQUksR0FBR1A7UUFDMUI7SUFDSixPQUNLO1FBQ0RJLGlCQUFpQkQsV0FBVyxDQUFDO0lBQ2pDO0lBQ0EsT0FBT0M7QUFDWDtBQUNBOzs7OztDQUtDLEdBQ0QsU0FBU0YsdUJBQXVCUSxHQUFHO0lBQy9CLE9BQU9iLE9BQU9jLGdCQUFnQixDQUFDRCxPQUFPLENBQUMsR0FBRztRQUN0Q1AsU0FBUztZQUNMUyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsWUFBWTtZQUNaZCxPQUFPQyx3QkFBd0JTLEtBQUtQO1FBQ3hDO0lBQ0o7QUFDSixFQUNBLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL21hcmtldGNhcC1kaXJlY3RvcnkvLi9ub2RlX21vZHVsZXMvZ29vZ2xlYXBpcy1jb21tb24vYnVpbGQvc3JjL3V0aWwuanM/ODc3YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAyMDI1IEdvb2dsZSBMTENcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5oZWFkZXJzVG9DbGFzc2ljSGVhZGVycyA9IGhlYWRlcnNUb0NsYXNzaWNIZWFkZXJzO1xuZXhwb3J0cy5tYXJzaGFsbEdheGlvc1Jlc3BvbnNlID0gbWFyc2hhbGxHYXhpb3NSZXNwb25zZTtcbi8qKlxuICogQSB1dGlsaXR5IGZvciBjb252ZXJ0aW5nIHBvdGVudGlhbCB7QGxpbmsgSGVhZGVycyBgSGVhZGVyc2B9IG9iamVjdHMgdG8gcGxhaW4gaGVhZGVycyBvYmplY3RzLlxuICpcbiAqIEBwYXJhbSBoZWFkZXJzIGFueSBjb21wYXRpYmxlIGBIZWFkZXJzSW5pdGAgKGBIZWFkZXJzYCwgKHN0cmluZywgc3RyaW5nKVtdLCB7fSlcbiAqIEByZXR1cm5zIHRoZSBoZWFkZXJzIGluIGBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+YCBmb3JtLlxuICovXG5mdW5jdGlvbiBoZWFkZXJzVG9DbGFzc2ljSGVhZGVycyhoZWFkZXJzKSB7XG4gICAgbGV0IGNsYXNzaWNIZWFkZXJzID0ge307XG4gICAgaWYgKGhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzKSB7XG4gICAgICAgIGhlYWRlcnMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgICAgY2xhc3NpY0hlYWRlcnNba2V5XSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShoZWFkZXJzKSkge1xuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBoZWFkZXJzKSB7XG4gICAgICAgICAgICBjbGFzc2ljSGVhZGVyc1trZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNsYXNzaWNIZWFkZXJzID0gaGVhZGVycyB8fCB7fTtcbiAgICB9XG4gICAgcmV0dXJuIGNsYXNzaWNIZWFkZXJzO1xufVxuLyoqXG4gKiBtYXJzaGFsbCBhIEdheGlvc1Jlc3BvbnNlIGludG8gYSBsaWJyYXJ5LWZyaWVuZGx5IHR5cGUuXG4gKlxuICogQHBhcmFtIHJlcyB0aGUgR2F4aW9zIFJlc3BvbnNlXG4gKiBAcmV0dXJucyB0aGUgR2F4aW9zUmVzcG9uc2Ugd2l0aCBIVFRQMi1yZWFkeS9jb21wYXRpYmxlIGhlYWRlcnNcbiAqL1xuZnVuY3Rpb24gbWFyc2hhbGxHYXhpb3NSZXNwb25zZShyZXMpIHtcbiAgICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMocmVzIHx8IHt9LCB7XG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBoZWFkZXJzVG9DbGFzc2ljSGVhZGVycyhyZXM/LmhlYWRlcnMpLFxuICAgICAgICB9LFxuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJoZWFkZXJzVG9DbGFzc2ljSGVhZGVycyIsIm1hcnNoYWxsR2F4aW9zUmVzcG9uc2UiLCJoZWFkZXJzIiwiY2xhc3NpY0hlYWRlcnMiLCJIZWFkZXJzIiwiZm9yRWFjaCIsImtleSIsIkFycmF5IiwiaXNBcnJheSIsInJlcyIsImRlZmluZVByb3BlcnRpZXMiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImVudW1lcmFibGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/googleapis-common/build/src/util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/googleapis-common/package.json":
/*!*****************************************************!*\
  !*** ./node_modules/googleapis-common/package.json ***!
  \*****************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"googleapis-common","version":"8.0.0","description":"A common tooling library used by the googleapis npm module. You probably don\'t want to use this directly.","repository":"googleapis/nodejs-googleapis-common","main":"build/src/index.js","types":"build/src/index.d.ts","files":["build/src","!build/src/**/*.map"],"scripts":{"prebenchmark":"npm run compile","benchmark":"node build/benchmark/bench.js","compile":"tsc -p .","test":"c8 mocha build/test","system-test":"c8 mocha build/system-test --timeout 600000","presystem-test":"npm run compile","fix":"gts fix","prepare":"npm run compile","pretest":"npm run compile","lint":"gts check","samples-test":"mocha build/samples-test","docs":"jsdoc -c .jsdoc.js","predocs-test":"npm run docs","docs-test":"linkinator docs","webpack":"webpack","browser-test":"karma start","prelint":"cd samples; npm link ../; npm install","clean":"gts clean","precompile":"gts clean"},"keywords":[],"author":"Google LLC","license":"Apache-2.0","dependencies":{"extend":"^3.0.2","gaxios":"^7.0.0-rc.4","google-auth-library":"^10.1.0","qs":"^6.7.0","url-template":"^2.0.8"},"devDependencies":{"@babel/plugin-proposal-private-methods":"^7.18.6","@types/extend":"^3.0.1","@types/mocha":"^10.0.10","@types/mv":"^2.1.0","@types/ncp":"^2.0.1","@types/nock":"^11.0.0","@types/proxyquire":"^1.3.28","@types/qs":"^6.5.3","@types/sinon":"^17.0.0","@types/tmp":"0.2.6","@types/url-template":"^2.0.28","c8":"^10.1.3","codecov":"^3.5.0","gts":"^6.0.2","http2spy":"^2.0.0","is-docker":"^2.0.0","jsdoc":"^4.0.0","jsdoc-fresh":"^3.0.0","jsdoc-region-tag":"^3.0.0","karma":"^6.0.0","karma-chrome-launcher":"^3.0.0","karma-coverage":"^2.0.0","karma-firefox-launcher":"^2.0.0","karma-mocha":"^2.0.0","karma-remap-coverage":"^0.1.5","karma-sourcemap-loader":"^0.4.0","karma-webpack":"^4.0.0","linkinator":"^6.1.2","mocha":"^11.1.0","mv":"^2.1.1","ncp":"^2.0.0","nock":"^14.0.1","null-loader":"^4.0.0","path-to-regexp":"^6.0.0","proxyquire":"^2.1.3","puppeteer":"^18.2.1","sinon":"^17.0.0","tmp":"^0.2.0","ts-loader":"^8.0.0","typescript":"^5.8.2","webpack":"^4.0.0","webpack-cli":"^4.0.0"},"engines":{"node":">=18.0.0"}}');

/***/ })

};
;